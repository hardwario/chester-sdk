{#- GLOBAL VARIABLES #}
{%- set variant_name_lower = data['project']['variant']|lower -%}

{#- COM MODES #}
{%- set config_mode = [] -%}
{%- set array_mode = ['none'] -%}

{%- set has_lte = 'subsystem-lte' in data['features'] -%}
{%- set has_lte_v2 = 'subsystem-lte-v2' in data['features'] -%}
{%- set has_lrw = 'subsystem-lrw' in data['features'] -%}

{%- if has_lte and has_lrw -%}
    {%- do config_mode.append('NONE') %}
    {%- do array_mode.extend(['lte', 'lrw']) %}
{%- elif has_lte_v2 and has_lrw -%}
 	{%- do config_mode.append('NONE') %}
    {%- do array_mode.extend(['lte', 'lrw']) %}
{%- elif has_lte -%}
    {%- do config_mode.append('LTE') %}
    {%- do array_mode.append('lte') %}
{%- elif has_lte_v2 -%}
    {%- do config_mode.append('LTE') %}
    {%- do array_mode.append('lte') %}
{%- elif has_lrw -%}
    {%- do config_mode.append('LRW') %}
    {%- do array_mode.append('lrw') %}
{%- else -%}
    {%- do config_mode.append('NONE') %}
{%- endif -%}

{#- COPYRIGHT AND LICENSE #}
{%- if data['project']['company'] or data['project']['license'] -%}
/*
	{%- if data['project']['company'] %}
 * Copyright (c) {{data['project']['company']}}
	{%- endif %}
	{%- if data['project']['company'] and data['project']['license'] %}
 * 
	{%- endif %}
	{%- if data['project']['license'] %}
 * {{data['project']['license'] }}
	{%- endif %}
 */
{% raw %}
{% endraw %}
{%- endif -%}

#ifndef APP_CONFIG_H_
#define APP_CONFIG_H_

/* Zephyr includes */
#include <zephyr/shell/shell.h>

/* Standard includes */
#include <stdbool.h>
#include <stddef.h>

/* ### Preserved code "includes" (begin) */
/* ^^^ Preserved code "includes" (end) */

#ifdef __cplusplus
extern "C" {
#endif
{# White line #}
{#- K1 #}
{%- for feature in data['features'] %}
	{%- if feature == 'hardware-chester-k1' %}
#define APP_CONFIG_CHANNEL_COUNT 4  
	{% endif %}
{%- endfor %}

{#- MODE LTE-LRW #}
enum app_config_mode {
	{%- for mode in array_mode %}
	APP_CONFIG_MODE_{{ mode | upper }} = {{loop.index0}},
	{%- endfor %}
};
{# wline #}

{#- MODE ENUM #}
{%- for parameter in data['parameters'] %}
	{%- set domain = parameter.domain | default('app')%}
	{%- set var = parameter.var | default(parameter.name | replace('-','_')) %}
    {%- if parameter['type'] == 'enum' %}
		{%- if parameter['depends_on'] %}
#if {{ parameter['depends_on'] }}
		{% endif %}
enum {{domain}}_config_{{ var | replace('_{}', '')}}{
		{%- for mode in parameter['valueset'] %}  
			{%- if parameter['related']%}
	{{domain | upper}}_CONFIG_{{ var | upper}}_{{ mode |  upper}} = {{ loop.index0 }},
			{%- else %}
	{{domain | upper}}_CONFIG_{{ var | replace('{}', '') | upper}}{{ mode |  upper}} = {{ loop.index0 }},
			{%- endif%}
     	{%- endfor %}		
};
		{% if parameter['depends_on'] %}
#endif /* {{ parameter['depends_on'] }} */
		{%- endif %}
    {% endif -%}
{%- endfor %}	

{#- STRUCT #} 
{%- if data and data_dependency %}
struct app_config {
{%- for dep , params in data_dependency['parameters'].items() %}
	{%- if dep != 'no_dependency' %}
	
#if {{ dep }}
	{%- endif %}
	{%- for param in params -%}
		{%- set domain = param.domain | default('app')%}
 		{%- set var = param.var | default(param.name | replace('-','_')) %}

	{#- STRING #}
		{%- if param['type'] == 'string'  %}
	char {{ var }} [{{param['buffer_size']}}];

	{#- ARRAY #}
		{%- elif param['type'].split('[')[0] == 'array'%}
	{{param['type'].split('[')[1][0:-1]}} {{ var }}[{{param['len']}}];

	{#- ENUM #}
	{%- elif param['type'] == 'enum' %}
		{%- if param['related']%}
			{%- for related in param['related'] %} 
	enum {{domain}}_config_{{ var }} {{ related['name'] | replace('-', '_') }}_{{ var }};
			{%- endfor %}
		{%- else %}
			{%- for related in param['valueset'] %} 
	enum {{domain}}_config_{{ var | replace('_{}', '') }} {{ var | replace('-', '_') | replace('{}', loop.index) }};
			{%- endfor %}
		{%- endif %}
				

	{#- OTHERS #}
	{%- elif param['type'] != 'enum' %}
	{{ param['type'] }} {{ var }};
	{%- endif %}

	{%- endfor %}
	{%- if dep != 'no_dependency' %}
#endif /* {{dep}} */
	{%- endif -%}	
{%- endfor %}

{#- MODE LTE-LRW #}
{%- if config_mode %}

	enum app_config_mode mode;
{%- endif %}

	/* ### Preserved code "struct variables" (begin) */
	/* ^^^ Preserved code "struct variables" (end) */

};
{% endif %}
extern struct app_config g_app_config;

int app_config_cmd_config_show(const struct shell *shell, size_t argc, char **argv);
int app_config_cmd_config_mode(const struct shell *shell, size_t argc, char **argv);

int app_config_cmd_config(const struct shell *shell, size_t argc, char **argv);

/* ### Preserved code "functions" (begin) */
/* ^^^ Preserved code "functions" (end) */

#ifdef __cplusplus
}
#endif

#endif /* APP_CONFIG_H_ */
{%- raw %}
{% endraw%}