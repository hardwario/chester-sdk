{#- GLOBAL VARIABLES #}
{%- set variant_name_lower = (data['project']['variant']|lower).split()[0] %}

{#- COPYRIGHT AND LICENSE #}
{%- if data['project']['company'] or data['project']['license'] -%}
/*
	{%- if data['project']['company'] %}
 * Copyright (c) {{data['project']['company']}}
	{%- endif %}
	{%- if data['project']['company'] and data['project']['license'] %}
 *
	{%- endif %}
	{%- if data['project']['license'] %}
 * {{data['project']['license'] }}
	{%- endif %}
 */
{% raw %}
{% endraw %}
{%- endif -%}
#include "app_config.h"
{%- if data['commands'] %}
#include "app_work.h"
{%- endif %}

/* Zephyr includes */
#include <zephyr/kernel.h>
#include <zephyr/logging/log.h>
#include <zephyr/shell/shell.h>

/* Standard includes */
#include <errno.h>
#include <stdlib.h>

/* ### Preserved code "includes" (begin) */
/* ^^^ Preserved code "includes" (end) */
{% raw %}
LOG_MODULE_REGISTER(app_shell, LOG_LEVEL_INF);
{% endraw %}

{#- COMMANDS #}
{%- if data['commands'] %}
{%- for command in data['commands']%}
{%- if command['depends_on'] %}
#if {{ command['depends_on'] }}
{%+ endif %}
static int cmd_{{command['name']}}(const struct shell *shell, size_t argc, char **argv)
{
	if (argc > 1) {
		shell_error(shell, "unknown parameter: %s", argv[1]);
		shell_help(shell);
		return -EINVAL;
	}

	{{command['callback']}};

	return 0;
}
{%- if command['depends_on'] %}

#endif /* {{ command['depends_on'] }} */
{%- endif %}
{% endfor %}
{%- endif %}
static int print_help(const struct shell *shell, size_t argc, char **argv)
{
	if (argc > 1) {
		shell_error(shell, "command not found: %s", argv[1]);
		shell_help(shell);
		return -EINVAL;
	}

	shell_help(shell);
	return 0;
}

/* ### Preserved code "functions 1" (begin) */
/* ^^^ Preserved code "functions 1" (end) */

/* clang-format off */

SHELL_STATIC_SUBCMD_SET_CREATE(sub_app,

			       SHELL_CMD_ARG(config, NULL, "Configurations commands.",
					     app_config_cmd_config, 1, 3),

/* ### Preserved code "subcmd" (begin) */
/* ^^^ Preserved code "subcmd" (end) */

			       SHELL_SUBCMD_SET_END);
SHELL_CMD_REGISTER(app, &sub_app, "Application commands.", print_help);

{#- COMMANDS #}
{%- if data['commands'] %}
{% for command in data['commands'] %}
{%- if command['depends_on'] %}
#if {{ command['depends_on'] }}
{%- endif %}
SHELL_CMD_REGISTER({{ command.name }}, NULL, "{{ command.help }}", cmd_{{ command.name }});
{%- if command['depends_on'] %}
#endif /* {{ command['depends_on'] }} */
{%- endif %}
{%- endfor %}
{%- endif %}

/* ### Preserved code "functions 2" (begin) */
/* ^^^ Preserved code "functions 2" (end) */

/* clang-format on */
{%- raw %}
{% endraw%}
